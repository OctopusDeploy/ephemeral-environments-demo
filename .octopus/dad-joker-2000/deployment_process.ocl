step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "deployment/manifests/*"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "deployment/manifests/*"
            Octopus.Action.KubernetesContainers.Namespace = "#{Kubernetes.Namespace}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "ephemeral-environments-demo" {
            acquisition_location = "NotAcquired"
            feed = "ephemeral-environments"
            package_id = "octopusdeploytesting/ephemeral-environments-demo"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "get-service-url-and-highlight" {
    name = "Log application URL"
    properties = {
        Octopus.Action.TargetRoles = "k8s"
    }
    
    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Wait for the LoadBalancer to get an external IP
                Write-Host "Waiting for LoadBalancer to be assigned an external IP..."
                $externalIp = $null
                
                do {
                    $externalIp = kubectl get svc dad-joker-2000-service -n #{Kubernetes.Namespace} -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
                    
                    if (-not $externalIp) {
                        Write-Host "External IP not yet assigned, waiting 10 seconds..."
                        Start-Sleep -Seconds 10
                    }
                } while (-not $externalIp)
                
                # Set the URL
                $serviceUrl = "http://$externalIp"
                Write-Host "External IP assigned: $externalIp"
                Write-Host "Application URL: $serviceUrl"
                
                # Create the highlight with markdown for a clickable link
                Write-Highlight "Application is available at: [$serviceUrl]($serviceUrl)"
            EOT
            Octopus.Action.KubernetesContainers.Namespace = "#{Kubernetes.Namespace}"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
    }
}