# This is a basic workflow to help you get started with Actions

name: Create New Release in Octopus

# Controls when the workflow will run
on:
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

env:
  REGISTRY_NAME: teamdevextesting
  REGISTRY: teamdevextesting.azurecr.io
  IMAGE_NAME: OctopusDeployTesting/dad-joker-2000

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job:
    name: Create new release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release version
        id: get_release_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}"

      - name: Get branch names
        id: branch_names
        uses: OctopusDeploy/util-actions/current-branch-name@current-branch-name.0.1.0

      - name: Get pre-release version
        id: get_pre_release_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_format: "${major}.${minor}.${patch}-${{ github.event_name == 'pull_request' && 'pr-' || '' }}${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.branch_names.outputs.branch_name }}.${{ github.run_number }}-${{ github.run_attempt }}"

      - name: Get version
        id: get_version
        run: echo "version=${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.get_release_version.outputs.version || steps.get_pre_release_version.outputs.version }}" >> $GITHUB_OUTPUT

      - name: "Az CLI login"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: "Login to Container Registry"
        run: |
          az acr login --name ${{ env.REGISTRY_NAME }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=raw,value=${{ steps.get_version.outputs.version }}

      # Build and push Docker image with Buildx
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Tag repo on main branch
        uses: actions/github-script@v6.3.3
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ steps.get_release_version.outputs.version }}',
              sha: context.sha
            })
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'

      - name: Login to Octopus Deploy
        uses: OctopusDeploy/login@v1
        with:
          server: https://team-devex-ephemeral-environments.testoctopus.app
          service_account_id: 44d1f23f-66ed-4ad9-babc-9adad7139c56

      - name: Create Octopus Deploy Release
        uses: OctopusDeploy/create-release-action@lourens/add-custom-fields
        with:
          project: Dad Joker 2000
          space: Demo
          release_number: ${{ steps.get_version.outputs.version }}
          channel: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'Production' || 'Test environments' }}
          git_ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}
          git_commit: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          package_version: ${{ steps.get_version.outputs.version }}
          custom_fields: |
            PullRequestNumber:${{ github.event_name == 'pull_request' && github.event.pull_request.number || '' }}
